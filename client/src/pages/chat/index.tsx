import Head from 'next/head';
import router from 'next/router';
import { v4 as uuidv4 } from 'uuid';
import React, { useEffect, useRef, useState } from 'react';
import { io, Socket } from 'socket.io-client';
import Message from '../../../../types/Message';
import User from '../../../../types/User';
import clsx from 'clsx';
import UserList from '@/components/UserList';

const socket = io('http://localhost:8000');
type Props = {};
const index = (props: Props) => {
	const [message, setMessage] = useState('');
	const [users, setUsers] = useState<User[]>([]);
	const [messages, setMessages] = useState<Message[]>([]);
	const [username, setUsername] = useState<string | null>(null);
	const [loading, setLoading] = useState(true);
	const lastMessageRef = useRef<HTMLDivElement>(null);
	useEffect(() => {
		const user = localStorage.getItem('username');
		if (!user || user.length == 0) {
			router.replace('/');
		} else {
			setUsername(user);
			setLoading(false);
		}
	}, []);
	useEffect(() => {
		console.log('useeffect ran');
		socket.connect();
		socket.on('connect', () => {
			socket.emit('newUser', {
				userName: localStorage.getItem('username'),
				socketID: socket.id,
			});
		});
		console.log(socket.active);
		return () => {
			socket.disconnect();
		};
	}, []);

	useEffect(() => {
		// 👇️ scroll to bottom every time messages change

		lastMessageRef.current?.scrollIntoView({ behavior: 'smooth' });
	}, [messages]);

	useEffect(() => {
		socket.on('messageResponse', (data: Message) => {
			// Stackoverflow solution for merging two arrays https://stackoverflow.com/a/60365470
			const map = new Map();
			messages.forEach((item) => map.set(item.id, item));
			[data].forEach((item) =>
				map.set(item.id, { ...map.get(item.id), ...item })
			);
			const mergedArr = Array.from(map.values());
			setMessages([...mergedArr]);
		});
	}, [messages]);

	const onLeaveChat = () => {
		try {
			localStorage.removeItem('username');
			setUsername('');
			socket.disconnect();
			router.replace('/');
		} catch (error) {}
	};
	if (loading) {
		return null;
	}
	const onAddMessage = () => {
		socket.emit('message', {
			message: message,
			name: username,
			socketID: socket.id,
			id: uuidv4(),
		});
		setMessage('');
	};
	return (
		<>
			<Head>
				<title>Chat Application</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main>
				<div className='h-screen bg-gray-200 flex p-5'>
					<UserList socket={socket} />
					<div className='flex flex-col w-full h-full'>
						<div className='flex flex-row items-center justify-between'>
							<p className='text-2xl'>Chatting right now</p>
							<button
								className='px-4 py-2 bg-red-400 hover:bg-red-600'
								onClick={onLeaveChat}>
								LEAVE CHAT
							</button>
						</div>
						<div className='flex flex-col h-full space-y-5 border border-green-500 p-4 m-1 overflow-y-scroll'>
							{messages.map(({ id, name, message }) => (
								<div
									className={clsx(
										'bg-green-500 max-w-fit h-fit p-2',
										name === username && 'bg-red-500 self-end'
									)}
									key={id}>
									<div>{name === username ? 'You' : name}</div>
									<div className='break-normal'>{message}</div>
								</div>
							))}
							<div ref={lastMessageRef} />
						</div>
						<div className='flex space-x-2 m-1'>
							<textarea
								value={message}
								onChange={(e) => setMessage(e.target.value)}
								className='w-full resize-none p-2'
							/>
							<button
								onClick={onAddMessage}
								className='bg-green-400 text-white px-4 py-2'>
								Send message
							</button>
						</div>
					</div>
				</div>
			</main>
		</>
	);
};

export default index;
